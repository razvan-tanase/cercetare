// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct AutoPosCreatorProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for AutoPosCreatorProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = AutoPosCreatorProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        AutoPosCreatorProxyMethods { wrapped_tx: tx }
    }
}

pub struct AutoPosCreatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> AutoPosCreatorProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        egld_wrapper_address: Arg0,
        router_address: Arg1,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&egld_wrapper_address)
            .argument(&router_address)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AutoPosCreatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AutoPosCreatorProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn create_lp_pos_from_single_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<MultiValueEncoded<Env::Api, MultiValue4<ManagedAddress<Env::Api>, ManagedBuffer<Env::Api>, TokenIdentifier<Env::Api>, BigUint<Env::Api>>>>,
    >(
        self,
        pair_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
        swap_operations: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createLpPosFromSingleToken")
            .argument(&pair_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .argument(&swap_operations)
            .original_result()
    }

    pub fn create_lp_pos_from_two_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createLpPosFromTwoTokens")
            .argument(&pair_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .original_result()
    }

    pub fn create_farm_pos_from_single_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<MultiValueEncoded<Env::Api, MultiValue4<ManagedAddress<Env::Api>, ManagedBuffer<Env::Api>, TokenIdentifier<Env::Api>, BigUint<Env::Api>>>>,
    >(
        self,
        farm_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
        swap_operations: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createFarmPosFromSingleToken")
            .argument(&farm_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .argument(&swap_operations)
            .original_result()
    }

    pub fn create_farm_pos_from_two_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        farm_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createFarmPosFromTwoTokens")
            .argument(&farm_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .original_result()
    }

    pub fn create_metastaking_pos_from_single_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<MultiValueEncoded<Env::Api, MultiValue4<ManagedAddress<Env::Api>, ManagedBuffer<Env::Api>, TokenIdentifier<Env::Api>, BigUint<Env::Api>>>>,
    >(
        self,
        metastaking_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
        swap_operations: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createMetastakingPosFromSingleToken")
            .argument(&metastaking_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .argument(&swap_operations)
            .original_result()
    }

    pub fn create_metastaking_pos_from_two_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        metastaking_address: Arg0,
        add_liq_first_token_min_amount_out: Arg1,
        add_liq_second_token_min_amount_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createMetastakingPosFromTwoTokens")
            .argument(&metastaking_address)
            .argument(&add_liq_first_token_min_amount_out)
            .argument(&add_liq_second_token_min_amount_out)
            .original_result()
    }

    pub fn create_farm_staking_pos_from_single_token<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<MultiValueEncoded<Env::Api, MultiValue4<ManagedAddress<Env::Api>, ManagedBuffer<Env::Api>, TokenIdentifier<Env::Api>, BigUint<Env::Api>>>>,
    >(
        self,
        farm_staking_address: Arg0,
        min_amount_out: Arg1,
        swap_operations: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("createFarmStakingPosFromSingleToken")
            .argument(&farm_staking_address)
            .argument(&min_amount_out)
            .argument(&swap_operations)
            .original_result()
    }

    pub fn exit_metastaking_pos_endpoint<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        metastaking_address: Arg0,
        first_token_min_amount_out: Arg1,
        second_token_min_amont_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("exitMetastakingPos")
            .argument(&metastaking_address)
            .argument(&first_token_min_amount_out)
            .argument(&second_token_min_amont_out)
            .original_result()
    }

    pub fn exit_farm_pos<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        farm_address: Arg0,
        first_token_min_amount_out: Arg1,
        second_token_min_amont_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("exitFarmPos")
            .argument(&farm_address)
            .argument(&first_token_min_amount_out)
            .argument(&second_token_min_amont_out)
            .original_result()
    }

    pub fn exit_lp_pos<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        pair_address: Arg0,
        first_token_min_amount_out: Arg1,
        second_token_min_amont_out: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("exitLpPos")
            .argument(&pair_address)
            .argument(&first_token_min_amount_out)
            .argument(&second_token_min_amont_out)
            .original_result()
    }
}
